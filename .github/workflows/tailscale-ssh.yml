name: Tailscale SSH Uptime

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      tagname: ${{ steps.tagname.outputs.tagname }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create a tagname
        id: tagname
        run: |
          tagname=$(git rev-parse --short HEAD)-$(date +%Y%m%d)-$(date +%H%M)
          echo "tagname=$tagname" >> $GITHUB_ENV
          echo "tagname=$tagname" >> $GITHUB_OUTPUT

  deploy:
    needs: build
    runs-on: ubuntu-latest
    env:
      TS_MACHINE_NAME: ${{ secrets.TS_MACHINE_NAME }}
      TS_USERNAME: ${{ secrets.TS_USERNAME }}

    steps:
      - name: Setup and connect to Tailscale network
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
          version: latest

      - name: Configure SSH
        # This is a workaround to avoid the SSH warning about known hosts & strict host key checking.
        # It's not a problem for us, because we're using Tailscale to connect.
        run: |
          mkdir -p ~/.ssh
          echo "Host *
            UserKnownHostsFile=/dev/null
            StrictHostKeyChecking no" > ~/.ssh/config

      - name: Check connection to Deployment Target
        run: |
          tailscale status | grep -q "$TS_MACHINE_NAME" || { echo "Machine not found"; exit 1; }
          ssh $TS_USERNAME@$TS_MACHINE_NAME "uptime"

      - name: Deploy with Docker Stack
        env:
          STACK_NAME: stg-api
          ENCRYPTED_ENV_KEYS: ${{ secrets.ENCRYPTED_ENV_KEYS }}
          AGE_PRIVATE_KEY: ${{ secrets.AGE_PRIVATE_KEY }}
          DEPLOYMENT_VERSION: ${{ needs.build.outputs.tagname }}
        run: |
          ssh $TS_USERNAME@$TS_MACHINE_NAME /bin/bash << EOF

            cd /home/${TS_USERNAME}/docker-swarm-config/stacks/api || { echo "Failed to change directory"; exit 1; }
            echo "Debug: Current directory: \$(pwd)"

            which age || { echo "age not installed, cannot decrypt secrets"; exit 1; }
            echo "${ENCRYPTED_ENV_KEYS}" > ${STACK_NAME}-${DEPLOYMENT_VERSION}.age.asc
            echo "${AGE_PRIVATE_KEY}" | age-keygen --identity - | age -d -o .decypted.env ${STACK_NAME}-${DEPLOYMENT_VERSION}.age.asc

            echo "DEPLOYMENT_ENV=${DEPLOYMENT_ENV}" >> .decypted.env
            echo "DEPLOYMENT_VERSION=${DEPLOYMENT_VERSION}" >> .decypted.env
            echo "SENTRY_ENVIRONMENT=${SENTRY_ENVIRONMENT}" >> .decypted.env

            set -a
            source .decypted.env || { echo "Failed to source .decypted.env"; exit 1; }
            set +a
            rm -f .decypted.env

            echo "Debug: Sanity check variables: "
            env | grep -E '^DEPLOYMENT' || { echo 'Vars not found'; exit 1; }
            echo "Debug: Sanity check config: "
            docker stack config -c stack-api.yml | rg 'DOMAIN' || { echo 'Invalid stack config'; exit 1; }

            # Dump the stack config to a file for debugging, this will be replaced with a deploy command
            docker stack config -c stack-api.yml > /tmp/stack-api-${DEPLOYMENT_VERSION}.yml
            
          EOF
        shell: bash
